name: Deploy App Windows

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull image from GHCR
      shell: powershell
      run: |
        $repo = "${{ github.repository }}".ToLower()
        $imageName = "ghcr.io/$repo/api:dev"
        Write-Host "Pulling image: $imageName"
        docker pull $imageName

    - name: Create .env file from GitHub Variable
      shell: powershell
      run: |
        $envContent = "${{ vars.ENV_FILE }}"
        if ([string]::IsNullOrEmpty($envContent)) {
          Write-Host "Error: ENV_FILE variable is empty!"
          exit 1
        }
        Set-Content -Path .env -Value $envContent
        Write-Host "Generated .env with content length: $($envContent.Length)"

    - name: Setup Firebase Credentials
      shell: powershell
      run: |
        # Decodificar y guardar el archivo
        $firebasePath = "Backend/Infrastructure/umandaditos_firebase.json"
        $decoded = [System.Convert]::FromBase64String("${{ vars.FIREBASE_CREDENTIALS_BASE64 }}")
        [System.IO.File]::WriteAllBytes($firebasePath, $decoded)
        
        # Verificar que se cre√≥ correctamente
        Write-Host "Firebase credential path: $(Resolve-Path $firebasePath)"
        Write-Host "File exists: $(Test-Path $firebasePath)"
        Write-Host "First 50 chars: $(Get-Content $firebasePath -Raw | Select-Object -First 50)"

    - name: Run container with .env
      shell: powershell
      run: |
        $repo = "${{ github.repository }}".ToLower()
        $imageName = "ghcr.io/$repo/api:dev"
        docker ps -a -q -f name=api_container | ForEach-Object { docker rm -f $_ }
        Write-Host "Running container from image: $imageName"
        docker run --env-file .env -d -p 9090:8080 --name api_container $imageName
