name: Deploy App Windows

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull image from GHCR
      shell: powershell
      run: |
        $repo = "${{ github.repository }}".ToLower()
        $imageName = "ghcr.io/$repo/api:dev"
        Write-Host "Pulling image: $imageName"
        docker pull $imageName

    - name: Create .env file from GitHub Variable
      shell: powershell
      run: |
        $envContent = "${{ vars.ENV_FILE }}"
        if ([string]::IsNullOrEmpty($envContent)) {
          Write-Host "Error: ENV_FILE variable is empty!"
          exit 1
        }
        Set-Content -Path .env -Value $envContent
        Write-Host "Generated .env with content length: $($envContent.Length)"

    - name: Setup Firebase Credentials
      shell: powershell
      run: |
        $backendPath = Join-Path $env:GITHUB_WORKSPACE "Backend"
        $infraPath = Join-Path $backendPath "Infrastructure"

        New-Item -ItemType Directory -Path $infraPath -Force | Out-Null

        $firebasePath = Join-Path $infraPath "umandaditos_firebase.json"

        [System.IO.File]::WriteAllBytes(
          $firebasePath,
          [System.Convert]::FromBase64String("${{ secrets.FIREBASE_CREDENTIALS_BASE64 }}")
        )

        if (Test-Path $firebasePath) {
          Write-Host "Firebase file created: $firebasePath"
          Write-Host "File size: $((Get-Item $firebasePath).Length) bytes"
          Write-Host "First lines:"
          Get-Content $firebasePath -Head 3
        } else {
          Write-Host "Firebase credentials file was NOT created!"
          exit 1
        }

    - name: Run container
      shell: powershell
      run: |
        $repo = "${{ github.repository }}".ToLower()
        $imageName = "ghcr.io/$repo/api:dev"

        # Clean existing container
        docker ps -a -q -f name=api_container | ForEach-Object { docker rm -f $_ }

        $hostPath = Convert-Path "$env:GITHUB_WORKSPACE\Backend\Infrastructure"

        Write-Host "Mounting volume from host path: $hostPath"
        Write-Host "Directory contents before container run:"
        Get-ChildItem -Path $hostPath

        if (-Not (Test-Path "$hostPath\umandaditos_firebase.json")) {
          Write-Host "Firebase file not found in host path. Aborting."
          exit 1
        }

        docker run --env-file .env `
          -e FIREBASE_CREDENTIAL_PATH="/app/Infrastructure/umandaditos_firebase.json" `
          -v "${hostPath}:/app/Infrastructure" `
          -d -p 9090:8080 `
          --name api_container `
          $imageName

        Write-Host "Verifying contents inside container:"
        docker exec api_container ls -la /app/Infrastructure
        docker exec api_container cat /app/Infrastructure/umandaditos_firebase.json | Select-String -First 3
